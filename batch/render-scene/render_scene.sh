#!/bin/bash

# Create a resource group.
az group create --name myResourceGroup --location eastus

# Create a general-purpose storage account in your resource group.
az storage account create \
    --resource-group myResourceGroup \
    --name mystorageaccount \
    --location eastus \
    --sku Standard_LRS

# Create a Batch account.
az batch account create \
    --name mybatchaccount \
    --storage-account mystorageaccount \
    --resource-group myResourceGroup \
    --location eastus

# Authenticate against the account directly for further CLI interaction.
az batch account login \
    --name mybatchaccount \
    --resource-group myResourceGroup \
    --shared-key-auth

# Export storage account variables to set storage account context.
# These are bash shell commands. Modify if using a different shell.

export AZURE_STORAGE_KEY=$(az storage account keys list --account-name mystorageaccount --resource-group myResourceGroup -o tsv --query [0].value)

export AZURE_STORAGE_ACCOUNT=mystorageaccount

# Create a blob container in the storage account for the scene files.
az storage container create \
    --public-access blob \
    --name scenefiles

# Upload 3ds Max scene files from the current working folder to the blob container.
az storage blob upload-batch \
    --destination scenefiles \
    --source ./

# Create a Batch pool for rendering. In this example, you specify the pool settings in a JSON file. See mypool.json for formatting.
az batch pool create \
    --json-file mypool.json

# Create a blob container for output files generated by Batch
az storage container create \
    --public-access blob \
    --name job-myrenderjob

# Create a Shared Access Signature (SAS) token to write output files to the container. Adjust expiry date as needed.
az storage account generate-sas \
    --permissions w \
    --resource-types co \
    --services b \
    --expiry 2018-11-15

# Create a rendering job to run on the pool
az batch job create \
    --id myrenderjob \
    --pool-id myrenderpool

# Add a rendering task to the job.
# In this example, you specify the task settings to render a frame in a 3ds Max scene in a JSON file. See myrendertask.json for formatting.
az batch task create \
    --job-id myrenderjob \
    --json-file myrendertask.json

# Monitor status about the task.
az batch task show \
    --job-id myrenderjob \
    --task-id myrendertask

# After the task completes, download an output file from storage to your local computer.
az storage blob download \
    --container-name job-myrenderjob \
    --file dragon.jpg \
    --name dragon0001.jpg

# Increase the number of low-priority nodes in the pool to 6.
az batch pool resize --pool-id myrenderpool --target-dedicated-nodes 0 --target-low-priority-nodes 6

# Add another rendering task task to the job.
# In this example, you specify the task settings to render multiple frames in a 3ds Max scene using a JSON file. See myrendertask_multi.json for formatting.
az batch task create \
    --job-id myrenderjob \
    --json-file myrendertask_multi.json


# List state of the job tasks.
az batch task list \
    --job-id myrenderjob \
    --output table

# Monitor status about one of the tasks.
az batch task show \
    --job-id myrenderjob \
    --task-id myrendertask

# Download all output files from storage.
az storage blob download-batch \
    --source job-myrenderjob \
    --destination .

